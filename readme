# 剪贴板同步项目

## **概述**

剪贴板同步项目旨在实现多个设备间无缝共享剪贴板内容。该项目支持实时、安全、高效的剪贴板数据同步，兼容 macOS、Linux 和 Windows 系统。支持集中式架构，满足不同的网络和部署需求。

---

## **主要功能**

- **实时同步**：任意设备的剪贴板变更会自动同步到所有连接的设备。
- **多平台支持**：兼容 macOS、Linux 和 Windows。
- **可扩展性**：支持多台设备网络，支持动态加入和退出。
- **安全通信**：确保数据传输经过加密并且经过身份验证。
- **高可定制性**：灵活的架构设计便于扩展和集成。

---

## **系统设计**

### **1. 架构选择**

#### **集中式架构（推荐）**

- **描述**：所有设备通过一个中央服务器进行通信。
- **优点**：
  - 实现简单，便于维护。
  - 易于监控和调试。
  - 对于 10 台以内的设备，性能足够稳定。
- **缺点**：
  - 单点故障问题。

---

### **2. 通信协议**

#### **WebSocket（推荐）**

- **用途**：实时同步，低延迟。
- **优点**：
  - 持久连接，确保即时更新。
  - 高效处理频繁的剪贴板变更。
  - 易于在 Go 中实现。

---

### **3. 数据模型**

#### **剪贴板内容**

```json
{
    "type": "text",       // 内容类型（文本、图片、文件等）
    "content": "Hello!",  // 实际剪贴板内容
    "timestamp": 1672531200, // 时间戳，用于冲突解决
    "origin": "machine_1" // 来源设备ID
}
```

#### **节点列表（用于服务器）**

```json
[
    {"id": "machine_1", "ip": "192.168.1.2", "last_sync": 1672531200},
    {"id": "machine_2", "ip": "192.168.1.3", "last_sync": 1672531199}
]
```

---

### **4. 同步逻辑**

#### **单设备**

1. 检测本地剪贴板变更。
2. 将更新发送至服务器。
3. 接收服务器广播的更新并更新本地剪贴板。

#### **多设备**

1. **广播更新**：
   - 某设备发送新的剪贴板内容到服务器。
   - 服务器将更新广播至所有连接设备。
2. **冲突处理**：
   - 基于时间戳的冲突解决策略：较新的内容优先。
3. **循环更新避免**：
   - **机制**：在广播数据中包含 `origin` 字段，标识更新来源。
   - **逻辑**：如果设备接收到的更新来源是自身，则忽略该更新。

---

### **5. 使用 Go 实现**

#### **开发环境**

- **语言**：Go（Golang）
- **依赖库**：
  - WebSocket：`github.com/gorilla/websocket`
  - HTTP 服务器：`net/http`
  - 剪贴板管理：`github.com/atotto/clipboard`

#### **实现步骤**

1. **服务器端逻辑**：

   - 使用 WebSocket 接收客户端连接。
   - 维护一个活动客户端列表。
   - 接收到剪贴板更新时，向所有其他客户端广播。

2. **客户端逻辑**：

   - 监听本地剪贴板变更。
   - 将变更通过 WebSocket 发送到服务器。
   - 接收服务器的广播更新，并更新本地剪贴板。

#### **循环更新避免**

- 在广播消息中添加 `origin` 字段：
  - 服务器广播时附带来源设备 ID。
  - 客户端检查 `origin` 字段，如果与自身设备 ID 匹配，则不更新。

---

## **总结**

本项目旨在简化多个设备间剪贴板内容的共享，同时确保安全性、可扩展性和易用性。推荐使用集中式架构和 WebSocket 通信方式，结合循环更新避免机制，提供高效可靠的剪贴板同步服务。未来可进一步扩展以提升功能和用户体验。

